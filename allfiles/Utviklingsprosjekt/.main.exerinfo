
# Information about all exercises in the file main.do.txt.
# The information can be loaded into a Python list of dicts by
#
# f = open('.main.exerinfo', 'r')
# exer = eval(f.read())
#
[{'answer': '',
  'closing_remarks': '',
  'file': None,
  'heading': '=====',
  'hints': [],
  'keywords': None,
  'label': 'example:sphere_freefall',
  'no': 1,
  'solution': '',
  'solution_file': None,
  'subex': [],
  'text': 'FIGURE:[eks1.2/2.png] Falling sphere.\n\nThe figure shows a falling sphere with a diameter $d$ and mass $m$ that falls vertically in a fluid. Use of Newton\'s 2nd law in the $z$-direction gives\n!bt\n\\begin{equation}\\label{eq:newton_2nd_sphere}\nm\\frac{dv}{dt} = mg-m_fg-\\frac{1}{2}m_f\\frac{dv}{dt}-\\frac{1}{2}\\rho_fv\\left|v\\right|A_kC_D,\n\\end{equation}\n\n!et\nwhere the different terms are interpreted as follows: $m=\\rho_k V$, where $\\rho_f$ is the density of the sphere and $V$ is its volume, is the mass of the sphere. $m_f=\\rho_f V$, where $\\rho_f$ is the density of the fluid, is the mass of the displaced fluid. $m_fg=$ is the buoyancy. $C_D$ is the drag coefficient. $A_k$ is the area projection of the sphere $= \\frac{\\pi}{4}d^2$. $\\frac{1}{2}m_f$ is the hydrodynamical mass (added mass). The expression for the hydrodynamical mass is derived in White cite{white1999fluid}, page 539-540. \n\nWe introduce the following abbreviations:\n!bt\n\\begin{equation}\n\\rho=\\frac{\\rho_f}{\\rho_k},\\ A=1+\\frac{\\rho}{2}, \\ B=(1-\\rho)g,\\ C=\\frac{3\\rho}{4d}.\n\\end{equation}\n\n!et\nEquation \\eqref{eq:newton_2nd_sphere} may then be written as \n!bt\n\\begin{equation} \\label{eq:sphere_1st_order}\n\\frac{dv}{dt}=\\frac{1}{A}(B-C\\cdot v\\left|v\\right|C_d).\n\\end{equation}\n\n!et\n$C_D$ is found experimentally as a function of the Reynolds number $R_e = \\frac{vd}{\\nu}$, where $\\nu$ is the kinematical viscosity. \n\nFigure ref{fig:CDsphere} shows $C_D$ as a function of $Re$. The Python programme _CDsphere.py_ produces the plot from a curve fit to the data of Evett and Liu cite{evett19892}. The programme uses a function `cd_sphere` which is shown at the end of this example. The values in the plot are not as accurate as the number of digits in the programme might indicate. For example is the location and the size of the "valley" in the diagram strongly dependent of the degree of turbulence in the free stream and the roughness of the sphere. \n\nIn air we may often neglect the buoyancy term and the hydrodynamical mass. This should not be done for a liquid.\n\nIntroducing $v=\\frac{dz}{dt}$ in Equation \\eqref{eq:sphere_1st_order}, we get a 2nd order ODE as follows\n!bt\n\\begin{equation}\\label{eq:sphere_second_order}\n\\frac{d^2z}{dt^2}=\\frac{1}{A}\\left(B-C\\cdot \\frac{dz}{dt}\\bigg|\\frac{dz}{dt}\\bigg|C_d\\right)\n\\end{equation}\n\n!et\nFor Equation \\eqref{eq:sphere_second_order} two initial conditions must be specified, e.g. $v=v_0$ and $z=z_0$ for $t=0$. \n\nFIGURE:[eks1.2/example_sphere.png] Drag coefficient $C_D$ as function of the Reynold\'s number $R_e$. label{fig:CDsphere}\n\n!bc pycod\ndef cd_sphere(Re):\n    "This function computes the drag coefficient of a sphere as a function of the Reynolds number Re."\n    # Curve fitted after fig. A-56 in Evett & Liu: "Fluid Mechanics & Hydraulics",\n    # Schaum\'s Solved Problems McGraw - Hill 1989.\n    \n    from numpy import log10, array, polyval\n    \n    if Re <= 0.0:\n        CD = 0.0\n    elif Re > 8.0e6:\n        CD = 0.2\n    elif Re > 0.0 and Re <= 0.5:\n        CD = 24.0/Re\n    elif Re > 0.5 and Re <= 100.0:\n        p = array([4.22, -14.05, 34.87, 0.658])\n        CD = polyval(p, 1.0/Re) \n    elif Re > 100.0 and Re <= 1.0e4:\n        p = array([-30.41, 43.72, -17.08, 2.41])\n        CD = polyval(p, 1.0/log10(Re))\n    elif Re > 1.0e4 and Re <= 3.35e5:\n        p = array([-0.1584, 2.031, -8.472, 11.932])\n        CD = polyval(p, log10(Re))\n    elif Re > 3.35e5 and Re <= 5.0e5:\n        x1 = log10(Re/4.5e5)\n        CD = 91.08*x1**4 + 0.0764\n    else:\n        p = array([-0.06338, 1.1905, -7.332, 14.93])\n        CD = polyval(p, log10(Re))\n    return CD\n\n# Calculate drag coefficient\nNpts = 500\nRe = logspace(-1, 7, Npts, True, 10)\nCD = zeros(Npts)\ni_list = range(0,Npts-1)\nfor i in i_list:\n    CD[i] = cd_sphere(Re[i])\n\n!ec\n\n!ebox',
  'title': 'Sphere in free fall',
  'type': 'Example',
  'type_visible': True}]