TITLE: An example of an example
AUTHOR: Johan Kolstø Sønstabø
DATE: today

# This is an example script generating a simple representative example of typical examples in TKT4140 Numerical Methods with Computer Laboratory.

======= Newton's Equation =======

Let's use "Heun's method": "http://en.wikipedia.org/wiki/Heun's_method" to solve Newton's equation:

!bt
\begin{align}
y^\prime(x)&=1-3x+y+x^2+xy & y(0)&=0
\label{eq:newton}
\end{align}
!et

with analytical solution:

!bt
\DeclareMathOperator\erf{erf}
\begin{align*}
y(x)=3\sqrt{2\pi e} \exp\left(x\left(1+{x\over2}\right)\right)\left[\erf\left({\sqrt{2}\over2}\left(1+x\right)\right)-\erf\left({\sqrt{2}\over2}\right)\right] + 4 \left[1-\exp\left(x\left(1+{x\over2}\right)\right)\right]-x
\end{align*}
!et

Here we have $f(x,y)=1-3x+y+x^2+xy = 1+x(x-3)+(1+x)y$. 

The following program solves equation \eqref{eq:newton} with Heun's method with $x\in\left[0,2\right]$ and $\Delta x=0.1$:

@@@CODE ./newton.py

Figure ref{fig:plot} shows the plot resulting from the program above. 
FIGURE: [plot.png, height=400 width=533 frac=0.5] Numerical and analytical solution of equation \eqref{eq:newton} computed by the program above. label{fig:plot}

The numerical scheme is given in the following code block:

!bc pycod
for n in range(0,steps-1):
    x[n+1] = (n+1)*dx
    xn = x[n]
    fn = 1 + xn*(xn-3) + y[n]*(1+xn)
    yp = y[n] + dx*fn    
    xnp1 = x[n+1]
    fnp1 = 1 + xnp1*(xnp1-3) + yp*(1+xnp1)
    y[n+1] = y[n] + 0.5*dx*(fn+fnp1)
!ec

The following code block is required to produce the plot in Figure ref{fig:plot}:
!bc pycod
import matplotlib.pylab as py
py.plot(x, y, '-b.', x, ya, '-g.')
py.xlabel('x')
py.ylabel('y')
py.title('Solution to Newton\'s equation')
py.legend(['Heun', 'Analytical'], loc='lower left')
py.grid()
py.show()
!ec

